# Define the namespace
apiVersion: v1
kind: Namespace
metadata:
  name: otel-auto
---
# postgres-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: otel-auto
data:
  dbname: postgres
---
# postgres-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: otel-auto
type: Opaque
data:
  username: cG9zdGdyZXM= # Base64 encoded 'postgres'
  password: bXlzZWNyZXRwYXNzd29yZA== # Base64 encoded 'mysecretpassword'
---
# app-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todo-app
  namespace: otel-auto
  labels:
    app: todo-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: todo-app
  template:
    metadata:
      labels:
        app: todo-app
    spec:
      containers:
      - name: todo-app
        image: docker.io/hanshal101/nodejs-otel-auto-instrumentation:latest # Replace with your built image
        ports:
        - containerPort: 3000
        env:
        - name: PORT
          value: "3000"
        - name: DB_HOST
          value: "postgres"
        - name: DB_PORT
          value: "5432"
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: dbname
---
apiVersion: v1
kind: Service
metadata:
  name: todo-app-service
  namespace: otel-auto
spec:
  selector:
    app: todo-app
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  type: LoadBalancer # Use LoadBalancer for external access
---
# postgres-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: otel-auto
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:14-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: dbname
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: init-sql
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: postgres-data
        emptyDir: {} # Use PersistentVolume for production
      - name: init-sql
        configMap:
          name: postgres-init-sql
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: otel-auto
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
  clusterIP: None # Headless service for direct DB connection
---
# postgres-init-sql.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-sql
  namespace: otel-auto
data:
  init.sql: |
    CREATE TABLE todos (
        id SERIAL PRIMARY KEY,
        title VARCHAR(255) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
